import os
import subprocess
from subprocess import run
import glob
import shutil
import shlex
import sys


base_path = "H:\\Dataset\\ImageNet\\val\\mini_1k\\imagenet-mini\\val\\"
target_base_path = "H:\\Dataset\\ImageNet\\val\\mini_1k\\"
format_path_dict = {
    "\\*.png": target_base_path + "png\\",
    "\\*.JPEG": target_base_path + "jpeg\\",
    "\\*.jpeg": target_base_path + "jpeg\\",
}
# 将ImageNet数据集汇总
def collect_all():
    for files in next(os.walk(base_path)):
        if isinstance(files, list) == False:
            files = [files]
        for file in files:
            for img_format, img_path in format_path_dict.items():
                for img in glob.glob(base_path + file + img_format):
                    print("process:  ", img)
                    tmp_img_path, tmp_img_name = os.path.split(img)
                    shutil.copy(img, img_path + tmp_img_name)

def split(cmd):
    lex = shlex.shlex(cmd)
    lex.quotes = '"'
    lex.whitespace_split = True
    lex.commenters = ""
    return list(lex)

def run_silent(cmd):
    FNULL = open(os.devnull, "w")
    rv = subprocess.call(split(cmd), stdout=FNULL, stderr=FNULL)
    if rv != 0:
        sys.stderr.write("Failure from subprocess:\n")
        sys.stderr.write("\t" + cmd + "\n")
        sys.stderr.write("Aborting!\n")
        sys.exit(rv)
    return rv

def convert_jpg2png():
    for tmp_jpg in glob.glob(target_base_path + "\\jpeg\\*"):
        tmp_img_path, tmp_img_name = os.path.split(tmp_jpg)
        tmp_png = target_base_path + "\\png\\" + tmp_img_name.split(".")[0] + ".png"
        cmd = (
            "ffmpeg -y -i %s  %s"
            % (tmp_jpg, tmp_png)
        )
        print("process ", tmp_img_name)
        run_silent(cmd)

def get_img_width(path):
    cmd = "magick identify -format %%w %s" % (path)
    proc = subprocess.Popen(
        split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8"
    )
    out, err = proc.communicate()
    if proc.returncode != 0:
        sys.stderr.write("Failed process: identify\n")
        sys.exit(proc.returncode)
    lines = out.split(os.linesep)
    return int(lines[0].strip())


def get_img_height(path):
    cmd = "magick identify -format %%h %s" % (path)
    proc = subprocess.Popen(
        split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8"
    )
    out, err = proc.communicate()
    if proc.returncode != 0:
        sys.stderr.write("Failed process: identify\n")
        sys.exit(proc.returncode)
    lines = out.split(os.linesep)
    return int(lines[0].strip())


def convert_a2b(src_fmt, dst_fmt):
    ex_fmt = ["yuv444p", "yuv420p"]
    change_to_dst_fmt = {
        "yuv444p":"yuvj444p",
        "yuv420p":"yuvj420p",
    }
    change_to_dst_file_fmt = {
        "yuv444p": "yuv",
        "yuv420p": "yuv",
    }

    for tmp_a in glob.glob(target_base_path + "\\%s\\*" %(src_fmt)):
        tmp_img_path, tmp_img_name = os.path.split(tmp_a)

        # 获取长度，主要是为了涉及到YUV格式的转换
        if src_fmt in ex_fmt:
            tmp_name = tmp_img_name.split(".")[0]
            tmp_info = tmp_name.split("_")
            tmp_size = len(tmp_info)
            h = tmp_info[tmp_size - 2]
            w = tmp_info[tmp_size - 1]
        elif dst_fmt in ex_fmt:
            h = get_img_width(tmp_a)
            w = get_img_height(tmp_a)
        else:
            h = 0
            w = 0

        if True:
            tmp_b = target_base_path + "\\%s\\" % (dst_fmt) + tmp_img_name.split(".")[0] + ".%s" % (dst_fmt)
        elif dst_fmt in ex_fmt:
            real_fmt = change_to_dst_file_fmt[dst_fmt]
            tmp_b = target_base_path + "\\%s\\" % (dst_fmt) + tmp_img_name.split(".")[0] + "_%s_%s.%s" % (str(h), str(w), real_fmt)
        else:
            tmp_b = target_base_path + "\\%s\\"%(dst_fmt) + tmp_img_name.split(".")[0] + ".%s"%(dst_fmt)

        if True:
            cmd = (
                "ffmpeg -y -i %s -pix_fmt yuv444p -vf scale=in_range=full:out_range=full %s"
                %(tmp_a, tmp_b)
            )
        elif src_fmt in ex_fmt:
            cmd = (
                "ffmpeg -s %sx%s -pix_fmt %s -i %s  %s"
                % (str(h), str(w), src_fmt, tmp_a, tmp_b)
            )
        elif dst_fmt in ex_fmt:
            real_dst_fmt = change_to_dst_fmt[dst_fmt]
            cmd = (
                "ffmpeg -i %s -s %sx%s -pix_fmt %s  %s"
                % (tmp_a, str(h), str(w), real_dst_fmt, tmp_b)
            )
        else:
            cmd = (
                "ffmpeg -y -i %s  %s"
                % (tmp_a, tmp_b)
            )
        print("process ", tmp_img_name)
        run_silent(cmd)

convert_a2b("png", "ppm")
#convert_a2b("yuv420p", "y4m")

print("finish")